# colors defined in ~/.bash_colors

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle=$red;
else
    userStyle=$green;
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="$red";
else
    hostStyle="$cyan";
fi;


accentStyle=$blue
dirStyle="$violet"

prompt_gear() {
    local gearStyle='';
    local gearStyleAndSymbol='';
    # Highlight the gear when you have elevated privileges
    sudo -nv &> /dev/null
    if [ $? -eq 0 ]; then
        gearStyle=$red
    else
        gearStyle=$white
    fi
    gearStyleAndSymbol="${gearStyle}${gear}${reset}"
    echo -E "${gearStyleAndSymbol}"
}

prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+';
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!';
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?';
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$';
            fi;

        fi;

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        [ -n "${s}" ]; # && s=" ${s}";

        outputBadge="${purple}<${yellow}${branchName}${orange}${s}${purple}>${reset}";

        echo -E "${outputBadge}";
    else
        return;
    fi;
}

NOVEL_UNICODE="⎈"
light_shade='░'
hex_closed='⏣'
hex_opened='⌬'
black_hexagon='⬢'
white_hexagon='⬡'
filled_circle='◍'
dotted_circle='◌'
gear='⚙'


prompt_command() {
    DATE_SEGMENT="${accentStyle}[${reset} $(iso_date) ${accentStyle}]${reset}"
    TIME_SEGMENT="${accentStyle}[ $(prompt_gear) $(iso_time) ${accentStyle}]${reset}"
    USER_SEGMENT="${hostStyle}$black_hexagon  ${userStyle}\u${accentStyle}@${hostStyle}\h${reset}"
    DIR_SEGMENT="${dirStyle}\w${reset}"
    GIT_SEGMENT="$(prompt_git)"
    SYMBOL_TEST_LINE="$hex_closed $hex_opened $gear"

    # TODO: conditionally remove the leading newline, don't show for first prompt
    PS1="
$DATE_SEGMENT $USER_SEGMENT : $DIR_SEGMENT $GIT_SEGMENT
$TIME_SEGMENT ${hostStyle}$white_hexagon${reset}  "
    PS2="\[$black\][            ] \[$hostStyle\]$white_hexagon\[$reset\]  "
}

export PROMPT_COMMAND=prompt_command
